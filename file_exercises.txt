/*
 * 1. Feladat: Írjon programot, amely beolvas egy fájlt szövegként, majd írja a képernyőre.
 */
#include <stdio.h>
#include <stdlib.h>

int main() {
    FILE *file;
    char filename[100];
    char c;
    
    printf("Kérem adja meg a fájl nevét: ");
    scanf("%s", filename);
    
    file = fopen(filename, "r");
    if (file == NULL) {
        printf("Nem sikerült megnyitni a fájlt.\n");
        return 1;
    }
    
    printf("A fájl tartalma:\n");
    while ((c = fgetc(file)) != EOF) {
        printf("%c", c);
    }
    
    fclose(file);
    return 0;
}

/*
 * 2. Feladat: Írjon programot, amely beolvas egy fájlt és írja ki, hány kisbetű van benne.
 */
#include <stdio.h>
#include <ctype.h>

int main() {
    FILE *file;
    char filename[100];
    char c;
    int lowercase_count = 0;
    
    printf("Kérem adja meg a fájl nevét: ");
    scanf("%s", filename);
    
    file = fopen(filename, "r");
    if (file == NULL) {
        printf("Nem sikerült megnyitni a fájlt.\n");
        return 1;
    }
    
    while ((c = fgetc(file)) != EOF) {
        if (islower(c)) {
            lowercase_count++;
        }
    }
    
    printf("A fájlban %d kisbetű található.\n", lowercase_count);
    
    fclose(file);
    return 0;
}

/*
 * 3. Feladat: Írjon programot, amely beolvas egy fájlt és írja ki, hány számjegy van benne.
 */
#include <stdio.h>
#include <ctype.h>

int main() {
    FILE *file;
    char filename[100];
    char c;
    int digit_count = 0;
    
    printf("Kérem adja meg a fájl nevét: ");
    scanf("%s", filename);
    
    file = fopen(filename, "r");
    if (file == NULL) {
        printf("Nem sikerült megnyitni a fájlt.\n");
        return 1;
    }
    
    while ((c = fgetc(file)) != EOF) {
        if (isdigit(c)) {
            digit_count++;
        }
    }
    
    printf("A fájlban %d számjegy található.\n", digit_count);
    
    fclose(file);
    return 0;
}

/*
 * 4. Feladat: Írjon programot, amely átmásol egy fájlban lévő szöveget egy másik fileba úgy, hogy a karaktereket véletlen számjegyekre cseréli ki.
 */
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main() {
    FILE *input_file, *output_file;
    char input_filename[100], output_filename[100];
    char c;
    
    printf("Kérem adja meg a forrásfájl nevét: ");
    scanf("%s", input_filename);
    
    printf("Kérem adja meg a célfájl nevét: ");
    scanf("%s", output_filename);
    
    input_file = fopen(input_filename, "r");
    if (input_file == NULL) {
        printf("Nem sikerült megnyitni a forrásfájlt.\n");
        return 1;
    }
    
    output_file = fopen(output_filename, "w");
    if (output_file == NULL) {
        printf("Nem sikerült létrehozni a célfájlt.\n");
        fclose(input_file);
        return 1;
    }
    
    srand(time(NULL));
    
    while ((c = fgetc(input_file)) != EOF) {
        // Minden karaktert véletlenszerű számjegyekre cserélünk
        fputc('0' + rand() % 10, output_file);
    }
    
    printf("A másolás véletlenszerű számjegyekkel sikeresen megtörtént.\n");
    
    fclose(input_file);
    fclose(output_file);
    return 0;
}

/*
 * 5. Feladat: Írjon programot, amely átmásol egy fájlban lévő szöveget úgy, hogy a nagybetűket kicsivé teszi.
 */
#include <stdio.h>
#include <ctype.h>

int main() {
    FILE *input_file, *output_file;
    char input_filename[100], output_filename[100];
    char c;
    
    printf("Kérem adja meg a forrásfájl nevét: ");
    scanf("%s", input_filename);
    
    printf("Kérem adja meg a célfájl nevét: ");
    scanf("%s", output_filename);
    
    input_file = fopen(input_filename, "r");
    if (input_file == NULL) {
        printf("Nem sikerült megnyitni a forrásfájlt.\n");
        return 1;
    }
    
    output_file = fopen(output_filename, "w");
    if (output_file == NULL) {
        printf("Nem sikerült létrehozni a célfájlt.\n");
        fclose(input_file);
        return 1;
    }
    
    while ((c = fgetc(input_file)) != EOF) {
        // A nagybetűket kisbetűvé konvertáljuk
        fputc(tolower(c), output_file);
    }
    
    printf("A másolás nagybetűk kisbetűvé alakításával sikeresen megtörtént.\n");
    
    fclose(input_file);
    fclose(output_file);
    return 0;
}

/*
 * 6. Feladat: Írjon programot, amely átmásol egy fájlban lévő szöveget úgy, hogy számokat betűvel írja ki.
 */
#include <stdio.h>
#include <ctype.h>

int main() {
    FILE *input_file, *output_file;
    char input_filename[100], output_filename[100];
    char c;
    
    // A számjegyek szöveges megfelelői
    const char *number_words[] = {"nulla", "egy", "kettő", "három", "négy", "öt", "hat", "hét", "nyolc", "kilenc"};
    
    printf("Kérem adja meg a forrásfájl nevét: ");
    scanf("%s", input_filename);
    
    printf("Kérem adja meg a célfájl nevét: ");
    scanf("%s", output_filename);
    
    input_file = fopen(input_filename, "r");
    if (input_file == NULL) {
        printf("Nem sikerült megnyitni a forrásfájlt.\n");
        return 1;
    }
    
    output_file = fopen(output_filename, "w");
    if (output_file == NULL) {
        printf("Nem sikerült létrehozni a célfájlt.\n");
        fclose(input_file);
        return 1;
    }
    
    while ((c = fgetc(input_file)) != EOF) {
        if (isdigit(c)) {
            // Ha számjegy, akkor a megfelelő szöveget írjuk ki
            fputs(number_words[c - '0'], output_file);
        } else {
            fputc(c, output_file);
        }
    }
    
    printf("A másolás számok betűvel írásával sikeresen megtörtént.\n");
    
    fclose(input_file);
    fclose(output_file);
    return 0;
}

/*
 * 7. Feladat: Írjon programot, amely a felhasználótól neveket kér be, és egy fájlban eltárolja azokat.
 */
#include <stdio.h>
#include <string.h>

int main() {
    FILE *file;
    char filename[100];
    char name[100];
    char choice;
    
    printf("Kérem adja meg a fájl nevét: ");
    scanf("%s", filename);
    
    file = fopen(filename, "w");
    if (file == NULL) {
        printf("Nem sikerült létrehozni a fájlt.\n");
        return 1;
    }
    
    do {
        printf("Kérem adjon meg egy nevet: ");
        scanf("%s", name);
        
        fprintf(file, "%s\n", name);
        
        printf("Szeretne még egy nevet megadni? (i/n): ");
        scanf(" %c", &choice);
        
    } while (choice == 'i' || choice == 'I');
    
    printf("A nevek sikeresen eltárolva a fájlban.\n");
    
    fclose(file);
    return 0;
}

/*
 * 8. Feladat: Rendezze ABC sorrendbe az előző pontban létrehozott fájlt.
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_NAMES 100
#define MAX_NAME_LENGTH 100

int compare_strings(const void *a, const void *b) {
    return strcmp((const char *)a, (const char *)b);
}

int main() {
    FILE *file;
    char filename[100];
    char names[MAX_NAMES][MAX_NAME_LENGTH];
    int name_count = 0;
    
    printf("Kérem adja meg a fájl nevét: ");
    scanf("%s", filename);
    
    // Fájl beolvasása
    file = fopen(filename, "r");
    if (file == NULL) {
        printf("Nem sikerült megnyitni a fájlt.\n");
        return 1;
    }
    
    while (fgets(names[name_count], MAX_NAME_LENGTH, file) != NULL && name_count < MAX_NAMES) {
        // Eltávolítjuk a sorvége karaktert
        names[name_count][strcspn(names[name_count], "\n")] = 0;
        name_count++;
    }
    
    fclose(file);
    
    // Rendezés
    qsort(names, name_count, MAX_NAME_LENGTH, compare_strings);
    
    // Visszaírás a fájlba
    file = fopen(filename, "w");
    if (file == NULL) {
        printf("Nem sikerült megnyitni a fájlt írásra.\n");
        return 1;
    }
    
    for (int i = 0; i < name_count; i++) {
        fprintf(file, "%s\n", names[i]);
    }
    
    fclose(file);
    
    printf("A fájl tartalma sikeresen ABC sorrendbe rendezve.\n");
    
    return 0;
}

/*
 * 9. Feladat: Írjon programot, amely átmásol egy fájlban levo szöveget egy másik fileba úgy, hogy az egész tartalmat visszafele írja bele.
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main() {
    FILE *input_file, *output_file;
    char input_filename[100], output_filename[100];
    char *buffer;
    long file_size;
    int i;
    
    printf("Kérem adja meg a forrásfájl nevét: ");
    scanf("%s", input_filename);
    
    printf("Kérem adja meg a célfájl nevét: ");
    scanf("%s", output_filename);
    
    input_file = fopen(input_filename, "rb");
    if (input_file == NULL) {
        printf("Nem sikerült megnyitni a forrásfájlt.\n");
        return 1;
    }
    
    // Fájl méretének meghatározása
    fseek(input_file, 0, SEEK_END);
    file_size = ftell(input_file);
    rewind(input_file);
    
    // Memória foglalása a teljes fájl tartalomnak
    buffer = (char *)malloc(file_size + 1);
    if (buffer == NULL) {
        printf("Memória foglalási hiba.\n");
        fclose(input_file);
        return 1;
    }
    
    // Fájl beolvasása
    fread(buffer, 1, file_size, input_file);
    buffer[file_size] = '\0';
    
    fclose(input_file);
    
    // Tartalom kiírása fordított sorrendben
    output_file = fopen(output_filename, "w");
    if (output_file == NULL) {
        printf("Nem sikerült létrehozni a célfájlt.\n");
        free(buffer);
        return 1;
    }
    
    for (i = file_size - 1; i >= 0; i--) {
        fputc(buffer[i], output_file);
    }
    
    fclose(output_file);
    free(buffer);
    
    printf("A tartalom sikeresen átmásolva fordított sorrendben.\n");
    
    return 0;
}