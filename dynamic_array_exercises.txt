/*
 * 1. Feladat: Írjon programot, amelyben létrehoz egy 10 elemű dinamikus tömböt, majd bővítse azt duplájára!
 */
#include <stdio.h>
#include <stdlib.h>

int main() {
    int *array;
    int i;
    
    // 10 elemű dinamikus tömb létrehozása
    array = (int *)malloc(10 * sizeof(int));
    
    if (array == NULL) {
        printf("Memória foglalási hiba.\n");
        return 1;
    }
    
    // Tömb feltöltése adatokkal
    for (i = 0; i < 10; i++) {
        array[i] = i * 10;
    }
    
    // Tömb tartalmának kiírása
    printf("Az eredeti tömb elemei:\n");
    for (i = 0; i < 10; i++) {
        printf("%d ", array[i]);
    }
    printf("\n");
    
    // Tömb bővítése duplájára
    array = (int *)realloc(array, 20 * sizeof(int));
    
    if (array == NULL) {
        printf("Memória újrafoglalási hiba.\n");
        return 1;
    }
    
    // Új elemek feltöltése
    for (i = 10; i < 20; i++) {
        array[i] = i * 10;
    }
    
    // Bővített tömb tartalmának kiírása
    printf("A duplájára bővített tömb elemei:\n");
    for (i = 0; i < 20; i++) {
        printf("%d ", array[i]);
    }
    printf("\n");
    
    // Memória felszabadítása
    free(array);
    
    return 0;
}

/*
 * 2. Feladat: Írjon programot, amelyben bekér a felhasználótól egy számot, majd létrehoz egy ekkora tömböt!
 */
#include <stdio.h>
#include <stdlib.h>

int main() {
    int *array;
    int size, i;
    
    printf("Kérem adja meg a tömb méretét: ");
    scanf("%d", &size);
    
    if (size <= 0) {
        printf("Érvénytelen méret.\n");
        return 1;
    }
    
    // Dinamikus tömb létrehozása a megadott mérettel
    array = (int *)malloc(size * sizeof(int));
    
    if (array == NULL) {
        printf("Memória foglalási hiba.\n");
        return 1;
    }
    
    // Tömb feltöltése adatokkal
    for (i = 0; i < size; i++) {
        array[i] = i * 2;
    }
    
    // Tömb tartalmának kiírása
    printf("A létrehozott tömb elemei:\n");
    for (i = 0; i < size; i++) {
        printf("%d ", array[i]);
    }
    printf("\n");
    
    // Memória felszabadítása
    free(array);
    
    return 0;
}

/*
 * 3. Feladat: Írjon programot, amelyben beolvas a 0 végjelig számokat, s ezeket egy tömbben tárolja el.
 */
#include <stdio.h>
#include <stdlib.h>

int main() {
    int *array = NULL;
    int size = 0, capacity = 10;
    int input;
    
    // Kezdeti memória foglalása
    array = (int *)malloc(capacity * sizeof(int));
    
    if (array == NULL) {
        printf("Memória foglalási hiba.\n");
        return 1;
    }
    
    printf("Adjon meg számokat (0 a befejezéshez):\n");
    
    while (1) {
        scanf("%d", &input);
        
        if (input == 0) {
            break;
        }
        
        // Ha megtelt a tömb, növeljük a kapacitást
        if (size >= capacity) {
            capacity *= 2;
            array = (int *)realloc(array, capacity * sizeof(int));
            
            if (array == NULL) {
                printf("Memória újrafoglalási hiba.\n");
                return 1;
            }
        }
        
        array[size++] = input;
    }
    
    // Tömb tartalmának kiírása
    printf("A beolvasott számok:\n");
    for (int i = 0; i < size; i++) {
        printf("%d ", array[i]);
    }
    printf("\n");
    
    // Memória felszabadítása
    free(array);
    
    return 0;
}

/*
 * 4. Feladat: Készítsen egy eljárást, ami egy paraméterül kapott tömböt bővít ki 1 elemmel!
 */
#include <stdio.h>
#include <stdlib.h>

// Eljárás a tömb bővítésére
// A size_ptr a tömb méretének mutatója
void expandArray(int **array_ptr, int *size_ptr, int new_element) {
    int *new_array;
    int size = *size_ptr;
    
    // Új tömb létrehozása
    new_array = (int *)malloc((size + 1) * sizeof(int));
    
    if (new_array == NULL) {
        printf("Memória foglalási hiba.\n");
        return;
    }
    
    // Régi elemek átmásolása
    for (int i = 0; i < size; i++) {
        new_array[i] = (*array_ptr)[i];
    }
    
    // Új elem hozzáadása
    new_array[size] = new_element;
    
    // Régi tömb felszabadítása
    free(*array_ptr);
    
    // Mutató frissítése
    *array_ptr = new_array;
    
    // Méret növelése
    (*size_ptr)++;
}

int main() {
    int *array;
    int size = 5;
    int new_element;
    
    // Kezdeti tömb létrehozása
    array = (int *)malloc(size * sizeof(int));
    
    if (array == NULL) {
        printf("Memória foglalási hiba.\n");
        return 1;
    }
    
    // Tömb feltöltése
    for (int i = 0; i < size; i++) {
        array[i] = i * 10;
    }
    
    // Eredeti tömb kiírása
    printf("Az eredeti tömb elemei:\n");
    for (int i = 0; i < size; i++) {
        printf("%d ", array[i]);
    }
    printf("\n");
    
    // Új elem bekérése
    printf("Kérem adja meg az új elemet: ");
    scanf("%d", &new_element);
    
    // Tömb bővítése
    expandArray(&array, &size, new_element);
    
    // Bővített tömb kiírása
    printf("A bővített tömb elemei:\n");
    for (int i = 0; i < size; i++) {
        printf("%d ", array[i]);
    }
    printf("\n");
    
    // Memória felszabadítása
    free(array);
    
    return 0;
}

/*
 * 5. Feladat: Írjon programot, amelyben feltölt két 10 elemű tömböt véletlenszámokkal, majd rendezze az egyikbe a páros, a másikba a páratlan elemeket!
 */
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main() {
    int original[20];
    int *even_nums = NULL;
    int *odd_nums = NULL;
    int even_count = 0, odd_count = 0;
    int i;
    
    // Random inicializálás
    srand(time(NULL));
    
    // Tömb feltöltése véletlenszámokkal
    printf("Az eredeti tömb elemei:\n");
    for (i = 0; i < 20; i++) {
        original[i] = rand() % 100; // 0-99 közötti véletlenszámok
        printf("%d ", original[i]);
        
        // Számoljuk a páros és páratlan elemeket
        if (original[i] % 2 == 0) {
            even_count++;
        } else {
            odd_count++;
        }
    }
    printf("\n");
    
    // Dinamikus tömbök létrehozása a páros és páratlan elemeknek
    even_nums = (int *)malloc(even_count * sizeof(int));
    odd_nums = (int *)malloc(odd_count * sizeof(int));
    
    if (even_nums == NULL || odd_nums == NULL) {
        printf("Memória foglalási hiba.\n");
        free(even_nums);
        free(odd_nums);
        return 1;
    }
    
    // Páros és páratlan elemek szétválasztása
    int even_index = 0, odd_index = 0;
    for (i = 0; i < 20; i++) {
        if (original[i] % 2 == 0) {
            even_nums[even_index++] = original[i];
        } else {
            odd_nums[odd_index++] = original[i];
        }
    }
    
    // Páros elemek kiírása
    printf("A páros elemek:\n");
    for (i = 0; i < even_count; i++) {
        printf("%d ", even_nums[i]);
    }
    printf("\n");
    
    // Páratlan elemek kiírása
    printf("A páratlan elemek:\n");
    for (i = 0; i < odd_count; i++) {
        printf("%d ", odd_nums[i]);
    }
    printf("\n");
    
    // Memória felszabadítása
    free(even_nums);
    free(odd_nums);
    
    return 0;
}

/*
 * 6. Feladat: Készítsen egy függvényt, ami a megkapott tömb elemeit számjegyekre bontva tárolja el! (12,23,554 → 1,2,2,3,5,5,4)
 */
#include <stdio.h>
#include <stdlib.h>

// Függvény a tömb számjegyekre bontásához
int* breakToDigits(int *array, int size, int *result_size) {
    int *digits = NULL;
    int digits_count = 0;
    int temp, digit_count, i;
    
    // Először meghatározzuk a szükséges méretet (számjegyek száma)
    for (i = 0; i < size; i++) {
        temp = array[i];
        
        // 0 kezelése külön
        if (temp == 0) {
            digits_count++;
            continue;
        }
        
        // A számjegyek számának meghatározása
        while (temp > 0) {
            digits_count++;
            temp /= 10;
        }
    }
    
    // Memória foglalása a számjegyeknek
    digits = (int *)malloc(digits_count * sizeof(int));
    if (digits == NULL) {
        printf("Memória foglalási hiba.\n");
        return NULL;
    }
    
    // Számjegyek kinyerése fordított sorrendben
    int digit_index = 0;
    for (i = 0; i < size; i++) {
        temp = array[i];
        
        // 0 kezelése külön
        if (temp == 0) {
            digits[digit_index++] = 0;
            continue;
        }
        
        // Ideiglenes tömb az aktuális szám számjegyeinek tárolására
        int temp_digits[20]; // Feltételezzük, hogy egy szám max 20 számjegyből áll
        digit_count = 0;
        
        while (temp > 0) {
            temp_digits[digit_count++] = temp % 10;
            temp /= 10;
        }
        
        // Számjegyek helyes sorrendben való átmásolása
        for (int j = digit_count - 1; j >= 0; j--) {
            digits[digit_index++] = temp_digits[j];
        }
    }
    
    *result_size = digits_count;
    return digits;
}

int main() {
    int array[] = {12, 23, 554};
    int size = sizeof(array) / sizeof(array[0]);
    int *digits;
    int digits_count;
    
    printf("Az eredeti tömb: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", array[i]);
    }
    printf("\n");
    
    digits = breakToDigits(array, size, &digits_count);
    
    if (digits != NULL) {
        printf("Számjegyekre bontva: ");
        for (int i = 0; i < digits_count; i++) {
            printf("%d ", digits[i]);
        }
        printf("\n");
        
        free(digits);
    }
    
    return 0;
}

/*
 * 7. Feladat: Készítse el az előző feladat ellenkezőjét, azaz véletlenszerűen kiválasztott két vagy három értékből számokat állít össze.
 */
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main() {
    int digits[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    int numbers[5]; // 5 számot fogunk összeállítani
    int i, j, digit_count, temp;
    
    srand(time(NULL));
    
    printf("Generált számok:\n");
    
    for (i = 0; i < 5; i++) {
        // Véletlenszerűen eldöntjük, hogy 2 vagy 3 számjegyet használunk
        digit_count = rand() % 2 + 2; // 2 vagy 3
        
        temp = 0;
        for (j = 0; j < digit_count; j++) {
            // Véletlenszerűen választunk egy számjegyet
            int random_digit = digits[rand() % 10];
            
            // Hozzáadjuk a számhoz (szorzás 10-zel és hozzáadás)
            temp = temp * 10 + random_digit;
        }
        
        numbers[i] = temp;
        printf("%d ", numbers[i]);
    }
    printf("\n");
    
    return 0;
}

/*
 * 8. Feladat: Írjon programot, amelyben számokat kér a felhasználótól 0 végjelig, majd tárolja a futóátlagot egy tömbben.
 */
#include <stdio.h>
#include <stdlib.h>

int main() {
    double *running_avg = NULL;
    int *numbers = NULL;
    int capacity = 10, size = 0;
    int input, i;
    double sum = 0.0;
    
    // Kezdeti memória foglalása
    numbers = (int *)malloc(capacity * sizeof(int));
    running_avg = (double *)malloc(capacity * sizeof(double));
    
    if (numbers == NULL || running_avg == NULL) {
        printf("Memória foglalási hiba.\n");
        free(numbers);
        free(running_avg);
        return 1;
    }
    
    printf("Adjon meg számokat (0 a befejezéshez):\n");
    
    while (1) {
        scanf("%d", &input);
        
        if (input == 0) {
            break;
        }
        
        // Ha megtelt a tömb, növeljük a kapacitást
        if (size >= capacity) {
            capacity *= 2;
            numbers = (int *)realloc(numbers, capacity * sizeof(int));
            running_avg = (double *)realloc(running_avg, capacity * sizeof(double));
            
            if (numbers == NULL || running_avg == NULL) {
                printf("Memória újrafoglalási hiba.\n");
                free(numbers);
                free(running_avg);
                return 1;
            }
        }
        
        // Szám hozzáadása és futóátlag számítása
        numbers[size] = input;
        sum += input;
        running_avg[size] = sum / (size + 1);
        
        size++;
    }
    
    // Beolvasott számok és futóátlagok kiírása
    printf("Beolvasott számok és futóátlagok:\n");
    printf("Sorszám\tSzám\tFutóátlag\n");
    for (i = 0; i < size; i++) {
        printf("%d\t%d\t%.2f\n", i+1, numbers[i], running_avg[i]);
    }
    
    // Memória felszabadítása
    free(numbers);
    free(running_avg);
    
    return 0;
}

/*
 * 9. Feladat: Írjon programot, amelyben feltölt két 10 elemű tömböt véletlenszámokkal, majd cserélje fel a tartalmukat.
 */
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main() {
    int array1[10];
    int array2[10];
    int temp;
    int i;
    
    srand(time(NULL));
    
    // Tömbök feltöltése véletlenszámokkal
    printf("Az első tömb eredeti elemei:\n");
    for (i = 0; i < 10; i++) {
        array1[i] = rand() % 100; // 0-99 közötti véletlenszámok
        printf("%d ", array1[i]);
    }
    printf("\n");
    
    printf("A második tömb eredeti elemei:\n");
    for (i = 0; i < 10; i++) {
        array2[i] = rand() % 100; // 0-99 közötti véletlenszámok
        printf("%d ", array2[i]);
    }
    printf("\n");
    
    // Tömbök felcserélése
    for (i = 0; i < 10; i++) {
        temp = array1[i];
        array1[i] = array2[i];
        array2[i] = temp;
    }
    
    // Felcserélt tömbök kiírása
    printf("Az első tömb új elemei:\n");
    for (i = 0; i < 10; i++) {
        printf("%d ", array1[i]);
    }
    printf("\n");
    
    printf("A második tömb új elemei:\n");
    for (i = 0; i < 10; i++) {
        printf("%d ", array2[i]);
    }
    printf("\n");
    
    return 0;
}